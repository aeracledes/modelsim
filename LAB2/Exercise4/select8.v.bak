module carry_select_adder(a,b,cin,sum);
input cin;
input [7:0]a,b;
output [8:0]sum;
wire [7:0]sum_temp;
wire cout;
wire cy_0,cy_1,cy_add1,cy_add2,cy_add3;
wire [3:0] sum_0,sum_1,a_1,b_1,a_2,b_2,sum_low,sum_high;
assign cy_0=1'b0;
assign cy_1=1'b1;
assign a_1={a[3],a[2],a[1],a[0]};
assign b_1={b[3],b[2],b[1],b[0]};
assign a_2={a[7],a[6],a[5],a[4]};
assign b_2={b[7],b[6],b[5],b[4]};

cla4 ADD1(a_1,b_1,cin,sum_low,cy_add1);
cla4 ADD2(a_2,b_2,cy_0,sum_0,cy_add2);
cla4 ADD3(a_2,b_2,cy_1,sum_1,cy_add3);
mux_2_to_1 MUX(sum_0,sum_1,cy_add1,sum_high);

assign sum_temp={sum_high,sum_low};
assign cout=cy_add1?cy_add3:cy_add2;
assign sum={cout,sum_temp};
endmodule

module cla4(
    output [3:0] S,
    output Cout;
    input [3:0] A,B,
    input Cin
    );
    wire [3:0] G,P,C;
    assign G = A & B;
    assign P = A ^ B;
    assign C[0] = Cin;
    assign C[1] = G[0] | (P[0] & C[0]);
    assign C[2] = G[1] | (P[1] & G[0]) | (P[1] & P[0] & C[0]);
    assign C[3] = G[2] | (P[2] & G[1]) | (P[2] & P[1] & G[0]) |             (P[2] & P[1] & P[0] & C[0]);
    assign Cout = G[3] | (P[3] & G[2]) | (P[3] & P[2] & G[1]) | (P[3] & P[2] & P[1] & G[0]) |(P[3] & P[2] & P[1] & P[0] & C[0]);
    assign S = P ^ C;
endmodule

module mux_2_to_1(i0,i1,s,out);
input[3:0]i0,i1;
input s;
output[3:0]out;
assign out=s?i1:i0;
endmodule
